version: 2.1
orbs:
  autify-mobile: autify/autify-mobile@dev:<<pipeline.git.revision>>
  autify-cli: autify/autify-cli@2
  node: circleci/node@5
  orb-tools: circleci/orb-tools@11.1

filters: &filters
  tags:
    only: /.*/

executors:
  windows:
    machine:
      resource_class: 'windows.medium'
      image: windows-server-2022-gui:current
  macos:
    macos:
      xcode: 14.0.0
    resource_class: 'macos.m1.medium.gen1'
  integration-test:
    docker:
      - image: cimg/node:current
    resource_class: small
    shell: bash
    environment:
      AUTIFY_MOBILE_ACCESS_TOKEN: token
      AUTIFY_CLI_INTEGRATION_TEST_INSTALL: 1
      AUTIFY_TEST_WAIT_INTERVAL_SECOND: 0

jobs:
  generate-fake-app:
    parameters:
      autify-cli-installer-url:
        type: string
    executor: integration-test
    shell: bash
    steps:
      - autify-cli/install:
          shell-installer-url: << parameters.autify-cli-installer-url >>
      - run: autify-mobile-generate-fake-app
      - persist_to_workspace:
          root: .
          paths:
            - android.apk
            - ios.app
  command-tests:
    parameters:
      os:
        type: executor
      autify-cli-installer-url:
        type: string
    executor: << parameters.os >>
    shell: bash
    environment:
      AUTIFY_MOBILE_ACCESS_TOKEN: token
      AUTIFY_CLI_INTEGRATION_TEST_INSTALL: 1
      AUTIFY_TEST_WAIT_INTERVAL_SECOND: 0
    steps:
      - checkout
      - run: bash test/test-run.test.bash
      - run: bash test/build-upload.test.bash
      - attach_workspace:
          at: .
      - node/install:
          node-version: 16.17.0
      - run: nvm use 16.17.0
      # Run your orb's commands to validate them.
      - autify-mobile/build-upload:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          build-path: ./android.apk
          workspace-id: AAA
      - autify-mobile/build-upload:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          build-path: ./ios.app
          workspace-id: AAA
      - autify-mobile/test-run:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-id: CCC
          verbose: false
      - autify-mobile/test-run:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-id: CCC
          wait: true
          verbose: false
      - autify-mobile/test-run:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-path: ./android.apk
          verbose: false
      - autify-mobile/test-run:
          autify-path: autify-with-proxy
          autify-cli-installer-url: << parameters.autify-cli-installer-url >>
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-path: ./ios.app
          verbose: false

workflows:
  test-deploy:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      - generate-fake-app:
          filters: *filters
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/stable/install-cicd.bash
      - command-tests:
          requires: [generate-fake-app]
          filters: *filters
          matrix:
            parameters:
              os: [autify-cli/default, macos, windows]
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/stable/install-cicd.bash
      - autify-mobile/build-upload:
          requires: [generate-fake-app]
          name: build-upload-android
          filters: *filters
          autify-path: autify-with-proxy
          build-path: ./android.apk
          workspace-id: AAA
          executor: integration-test
      - autify-mobile/build-upload:
          requires: [generate-fake-app]
          name: build-upload-ios
          filters: *filters
          autify-path: autify-with-proxy
          build-path: ./ios.app
          workspace-id: AAA
          executor: integration-test
      - autify-mobile/test-run:
          requires: [generate-fake-app]
          name: test-run
          filters: *filters
          autify-path: autify-with-proxy
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-id: CCC
          verbose: false
          executor: integration-test
      - autify-mobile/test-run:
          requires: [generate-fake-app]
          name: test-run-wait
          filters: *filters
          autify-path: autify-with-proxy
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-id: CCC
          wait: true
          verbose: false
          executor: integration-test
      - autify-mobile/test-run:
          requires: [generate-fake-app]
          name: test-run-android
          filters: *filters
          autify-path: autify-with-proxy
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-path: ./android.apk
          verbose: false
          executor: integration-test
      - autify-mobile/test-run:
          requires: [generate-fake-app]
          name: test-run-ios
          filters: *filters
          autify-path: autify-with-proxy
          autify-test-url: https://mobile-app.autify.com/projects/AAA/test_plans/BBB
          build-path: ./ios.app
          verbose: false
          executor: integration-test
      - orb-tools/pack:
          filters: *filters
      - orb-tools/publish:
          orb-name: autify/autify-mobile
          vcs-type: << pipeline.project.type >>
          pub-type: production
          requires:
            - generate-fake-app
            - command-tests
            - build-upload-android
            - build-upload-ios
            - test-run
            - test-run-wait
            - test-run-android
            - test-run-ios
            - orb-tools/pack
          context: orb-publishing
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9]+\.[0-9]+\.[0-9]+$/
  nightly-test:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - generate-fake-app:
          name: stable-generate-fake-app
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/stable/install-cicd.bash
      - command-tests:
          requires: [stable-generate-fake-app]
          name: stable-<< matrix.os >>
          matrix:
            parameters:
              os: [autify-cli/default, macos, windows]
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/stable/install-cicd.bash
  nightly-beta-test:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - generate-fake-app:
          name: beta-generate-fake-app
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/beta/install-cicd.bash
      - command-tests:
          requires: [beta-generate-fake-app]
          name: beta-<< matrix.os >>
          matrix:
            parameters:
              os: [autify-cli/default, macos, windows]
          autify-cli-installer-url: https://autify-cli-assets.s3.amazonaws.com/autify-cli/channels/beta/install-cicd.bash
